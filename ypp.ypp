%{
#include "hpp.hpp"
%}
%defines %union { Sym*o; }
%token <o> SYM NUM STR			/* symbol number string */
%token <o> LP RP LQ RQ LC RC	/* () [] {} */
%token <o> EQ AT				/* = @ */
%token <o> ADD SUB MUL DIV POW	/* + - * / ^ */
%type <o> ex scalar op list		/* expression scalar operator [list] */
%%
REPL : | REPL ex { cout << $2->dump(); };
ex : scalar | op
	| LP ex RP		{ $$=$2; }
	| LQ list RQ	{ $$=$2; }
	| ex EQ ex		{ $$=new Rule($1,$3); }
	| ex ADD ex		{ $$=$2; $$->push($1); $$->push($3); }
	| ex DIV ex		{ $$=$2; $$->push($1); $$->push($3); }
;
scalar : SYM | NUM | STR ;
op : EQ | AT ;
list :				{ $$=new List(); }
	| list ex		{ $$=$1; $$->push($2); }
;
%%
